[{"question": "Calculate yesterday's total payment volume", "answer": "SELECT SUM(amount) FROM transaction_fact WHERE is_success = TRUE AND DATE(transaction_time) = CURRENT_DATE - INTERVAL 1 DAY"},
{"question": "Show TPV for each currency last week", "answer": "SELECT currency, SUM(amount) FROM transaction_fact WHERE is_success = TRUE AND transaction_time >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY) GROUP BY currency"},
{"question": "List hourly TPV for 2023-12-31", "answer": "SELECT HOUR(transaction_time), SUM(amount) FROM transaction_fact WHERE is_success = TRUE AND DATE(transaction_time) = '2023-12-31' GROUP BY HOUR(transaction_time)"},
{"question": "Compare TPV between US and EU merchants this month", "answer": "SELECT merchant_country, SUM(amount) FROM transaction_fact WHERE is_success = TRUE AND MONTH(transaction_time) = MONTH(CURRENT_DATE) AND merchant_country IN ('US','DE','FR') GROUP BY merchant_country"},
{"question": "Find TPV growth rate compared to previous month", "answer": "WITH curr AS (SELECT SUM(amount) AS amt FROM transaction_fact WHERE is_success=TRUE AND MONTH(transaction_time)=MONTH(CURRENT_DATE)), prev AS (SELECT SUM(amount) AS amt FROM transaction_fact WHERE is_success=TRUE AND MONTH(transaction_time)=MONTH(CURRENT_DATE)-1) SELECT (curr.amt - prev.amt)/prev.amt*100 FROM curr, prev"},
{"question": "Show TPV for new users in Q3 2023", "answer": "SELECT SUM(t.amount) FROM transaction_fact t JOIN user_behavior_summary u ON t.user_id=u.user_id WHERE t.is_success=TRUE AND QUARTER(t.transaction_time)=3 AND YEAR(t.transaction_time)=2023 AND u.user_first_transaction_date BETWEEN '2023-07-01' AND '2023-09-30'"},
{"question": "Calculate TPV per payment method", "answer": "SELECT payment_method, SUM(amount) FROM transaction_fact WHERE is_success=TRUE GROUP BY payment_method"},
{"question": "Find TPV for cross-border transactions today", "answer": "SELECT SUM(amount) FROM transaction_fact WHERE is_success=TRUE AND user_country != merchant_country AND DATE(transaction_time) = CURRENT_DATE"},
{"question": "List merchants with TPV over $1M this year", "answer": "SELECT merchant_id, SUM(amount) FROM transaction_fact WHERE is_success=TRUE AND YEAR(transaction_time)=YEAR(CURRENT_DATE) GROUP BY merchant_id HAVING SUM(amount) > 1000000"},
{"question": "Calculate TPV per user country", "answer": "SELECT user_country, SUM(amount) FROM transaction_fact WHERE is_success=TRUE GROUP BY user_country"},
{"question": "Calculate payment success rate for credit cards yesterday", "answer": "SELECT (COUNT(CASE WHEN is_success THEN 1 END)*100.0/COUNT(*) FROM transaction_fact WHERE payment_method='Credit Card' AND DATE(transaction_time)=CURRENT_DATE - INTERVAL 1 DAY"},
{"question": "Show failure rate by hour for last Saturday", "answer": "SELECT HOUR(transaction_time), (COUNT(CASE WHEN NOT is_success THEN 1 END)*100.0/COUNT(*)) AS rate FROM transaction_fact WHERE DATE(transaction_time) = DATE_SUB(CURRENT_DATE, INTERVAL WEEKDAY(CURRENT_DATE)+1 DAY) GROUP BY HOUR(transaction_time)"},
{"question": "Compare success rates between new and existing users", "answer": "SELECT CASE WHEN u.user_first_transaction_date >= DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY) THEN 'New' ELSE 'Existing' END, (COUNT(CASE WHEN t.is_success THEN 1 END)*100.0/COUNT(*)) FROM transaction_fact t JOIN user_behavior_summary u ON t.user_id=u.user_id GROUP BY 1"},
{"question": "Find failure rate for transactions over $1000", "answer": "SELECT (COUNT(CASE WHEN NOT is_success THEN 1 END)*100.0/COUNT(*)) FROM transaction_fact WHERE amount > 1000"},
{"question": "Show success rate trend by week", "answer": "SELECT YEARWEEK(transaction_time), (COUNT(CASE WHEN is_success THEN 1 END)*100.0/COUNT(*)) FROM transaction_fact GROUP BY YEARWEEK(transaction_time)"},
{"question": "Calculate failure rate for disputed transactions", "answer": "SELECT (COUNT(CASE WHEN NOT is_success THEN 1 END)*100.0/COUNT(*)) FROM transaction_fact WHERE is_disputed = TRUE"},
{"question": "Find success rate correlation with payment method", "answer": "SELECT payment_method, (COUNT(CASE WHEN is_success THEN 1 END)*100.0/COUNT(*)) FROM transaction_fact GROUP BY payment_method"},
{"question": "Compare failure rates between domestic and cross-border", "answer": "SELECT CASE WHEN user_country=merchant_country THEN 'Domestic' ELSE 'Cross-border' END, (COUNT(CASE WHEN NOT is_success THEN 1 END)*100.0/COUNT(*)) FROM transaction_fact GROUP BY 1"},
{"question": "Show success rate for recurring payments", "answer": "SELECT (COUNT(CASE WHEN is_success THEN 1 END)*100.0/COUNT(*) FROM transaction_fact WHERE payment_method='Recurring'"},
{"question": "Find success rate by user country", "answer": "SELECT user_country, (COUNT(CASE WHEN is_success THEN 1 END)*100.0/COUNT(*)) FROM transaction_fact GROUP BY user_country"},
{"question": "Calculate fraud rate this month", "answer": "SELECT (COUNT(CASE WHEN is_fraud THEN 1 END)*100.0/COUNT(*)) FROM transaction_fact WHERE MONTH(transaction_time)=MONTH(CURRENT_DATE)"},
{"question": "List top 10 users by fraud transactions", "answer": "SELECT user_id, COUNT(*) FROM transaction_fact WHERE is_fraud=TRUE GROUP BY user_id ORDER BY 2 DESC LIMIT 10"},
{"question": "Find average fraud transaction amount", "answer": "SELECT AVG(amount) FROM transaction_fact WHERE is_fraud=TRUE"},
{"question": "Show fraud rate by payment method", "answer": "SELECT payment_method, (COUNT(CASE WHEN is_fraud THEN 1 END)*100.0/COUNT(*)) FROM transaction_fact GROUP BY payment_method"},
{"question": "Compare fraud rates between countries", "answer": "SELECT user_country, (COUNT(CASE WHEN is_fraud THEN 1 END)*100.0/COUNT(*)) FROM transaction_fact GROUP BY user_country"},
{"question": "Find fraud transactions over $5000 last year", "answer": "SELECT * FROM transaction_fact WHERE is_fraud=TRUE AND amount > 5000 AND YEAR(transaction_time)=YEAR(CURRENT_DATE)-1"},
{"question": "Calculate fraud-to-success ratio", "answer": "SELECT (SUM(CASE WHEN is_fraud THEN 1 END)/SUM(CASE WHEN is_success THEN 1 END)) FROM transaction_fact"},
{"question": "Show fraud rate trend by month", "answer": "SELECT DATE_FORMAT(transaction_time,'%Y-%m'), (COUNT(CASE WHEN is_fraud THEN 1 END)*100.0/COUNT(*)) FROM transaction_fact GROUP BY 1"},
{"question": "Find merchants with highest fraud count", "answer": "SELECT merchant_id, COUNT(*) FROM transaction_fact WHERE is_fraud=TRUE GROUP BY merchant_id ORDER BY 2 DESC LIMIT 5"},
{"question": "Calculate fraud amount as percentage of TPV", "answer": "SELECT (SUM(CASE WHEN is_fraud THEN amount END)/SUM(amount))*100 FROM transaction_fact"},
{"question": "Find top 10 users by lifetime spending", "answer": "SELECT user_id, total_amount FROM user_behavior_summary ORDER BY total_amount DESC LIMIT 10"},
{"question": "Calculate ARPU for active users", "answer": "SELECT SUM(total_amount)/COUNT(*) FROM user_behavior_summary WHERE is_active=TRUE"},
{"question": "Show user transaction frequency distribution", "answer": "SELECT total_transactions, COUNT(*) FROM user_behavior_summary GROUP BY total_transactions ORDER BY 1"},
{"question": "Find LTV by registration year", "answer": "SELECT YEAR(registration_date), AVG(total_amount) FROM user_behavior_summary GROUP BY YEAR(registration_date)"},
{"question": "Calculate percentage of users with LTV>$1000", "answer": "SELECT (COUNT(CASE WHEN total_amount>1000 THEN 1 END)*100.0/COUNT(*)) FROM user_behavior_summary"},
{"question": "Show average transaction value per user", "answer": "SELECT user_id, total_amount/total_transactions FROM user_behavior_summary WHERE total_transactions>0"},
{"question": "Find users with transactions but zero LTV", "answer": "SELECT * FROM user_behavior_summary WHERE total_transactions>0 AND total_amount=0"},
{"question": "Compare new vs old user ARPU", "answer": "SELECT CASE WHEN registration_date >= '2024-01-01' THEN 'New' ELSE 'Old' END, AVG(total_amount) FROM user_behavior_summary GROUP BY 1"},
{"question": "Calculate 30-day active user count", "answer": "SELECT COUNT(*) FROM user_behavior_summary WHERE is_active=TRUE"},
{"question": "Find users with high LTV but low frequency", "answer": "SELECT * FROM user_behavior_summary WHERE total_amount > 10000 AND total_transactions < 5"},
{"question": "Calculate refund rate this quarter", "answer": "SELECT (COUNT(CASE WHEN is_refunded THEN 1 END)*100.0/COUNT(*)) FROM transaction_fact WHERE is_success=TRUE AND QUARTER(transaction_time)=QUARTER(CURRENT_DATE)"},
{"question": "Show refund amount by month", "answer": "SELECT DATE_FORMAT(transaction_time,'%Y-%m'), SUM(refund_amount) FROM transaction_fact WHERE is_refunded=TRUE GROUP BY 1"},
{"question": "Find average time between transaction and refund", "answer": "SELECT AVG(DATEDIFF(refund_time, transaction_time)) FROM transaction_fact WHERE is_refunded=TRUE"},
{"question": "List merchants with highest refund rates", "answer": "SELECT merchant_id, (COUNT(CASE WHEN is_refunded THEN 1 END)*100.0/COUNT(*)) FROM transaction_fact GROUP BY merchant_id HAVING COUNT(*) > 100 ORDER BY 2 DESC LIMIT 10"},
{"question": "Compare refund rates between payment methods", "answer": "SELECT payment_method, (COUNT(CASE WHEN is_refunded THEN 1 END)*100.0/COUNT(*)) FROM transaction_fact GROUP BY payment_method"},
{"question": "Calculate dispute rate for cross-border transactions", "answer": "SELECT (COUNT(CASE WHEN is_disputed THEN 1 END)*100.0/COUNT(*)) FROM transaction_fact WHERE user_country != merchant_country"},
{"question": "Find average dispute resolution time", "answer": "SELECT AVG(DATEDIFF(dispute_resolved_time, transaction_time)) FROM transaction_fact WHERE is_disputed=TRUE AND dispute_resolved_time IS NOT NULL"},
{"question": "Show disputed amount percentage of TPV", "answer": "SELECT (SUM(CASE WHEN is_disputed THEN amount END)/SUM(amount))*100 FROM transaction_fact WHERE is_success=TRUE"},
{"question": "List users with most disputes", "answer": "SELECT user_id, COUNT(*) FROM transaction_fact WHERE is_disputed=TRUE GROUP BY user_id ORDER BY 2 DESC LIMIT 5"},
{"question": "Calculate refund amount ratio for high-risk countries", "answer": "SELECT (SUM(refund_amount)/SUM(amount))*100 FROM transaction_fact WHERE user_country IN ('XX','YY')"},
{"question": "Count active merchants this month", "answer": "SELECT COUNT(DISTINCT merchant_id) FROM transaction_fact WHERE MONTH(transaction_time)=MONTH(CURRENT_DATE)"},
{"question": "Show average settlement time per merchant", "answer": "SELECT merchant_id, AVG(DATEDIFF(settlement_time, transaction_time)) FROM transaction_fact WHERE settlement_time IS NOT NULL GROUP BY merchant_id"},
{"question": "Find merchants with slowest settlement", "answer": "SELECT merchant_id, AVG(DATEDIFF(settlement_time, transaction_time)) AS avg_days FROM transaction_fact WHERE settlement_time IS NOT NULL GROUP BY merchant_id ORDER BY avg_days DESC LIMIT 10"},
{"question": "Calculate percentage of settled transactions", "answer": "SELECT (COUNT(CASE WHEN settlement_time IS NOT NULL THEN 1 END)*100.0/COUNT(*)) FROM transaction_fact WHERE is_success=TRUE"},
{"question": "Show settlement time distribution", "answer": "SELECT DATEDIFF(settlement_time, transaction_time), COUNT(*) FROM transaction_fact WHERE settlement_time IS NOT NULL GROUP BY 1"},
{"question": "Find merchants with pending settlements", "answer": "SELECT merchant_id, COUNT(*) FROM transaction_fact WHERE is_success=TRUE AND settlement_time IS NULL GROUP BY merchant_id"},
{"question": "Compare settlement time between currencies", "answer": "SELECT currency, AVG(DATEDIFF(settlement_time, transaction_time)) FROM transaction_fact WHERE settlement_time IS NOT NULL GROUP BY currency"},
{"question": "Calculate settlement efficiency improvement", "answer": "WITH curr AS (SELECT AVG(DATEDIFF(settlement_time, transaction_time)) AS t FROM transaction_fact WHERE YEAR(transaction_time)=2024), prev AS (SELECT AVG(DATEDIFF(settlement_time, transaction_time)) AS t FROM transaction_fact WHERE YEAR(transaction_time)=2023) SELECT (prev.t - curr.t) FROM curr, prev"},
{"question": "List merchants with weekend settlements", "answer": "SELECT DISTINCT merchant_id FROM transaction_fact WHERE DAYOFWEEK(settlement_time) IN (1,7)"},
{"question": "Find settlement failures per merchant", "answer": "SELECT merchant_id, COUNT(*) FROM transaction_fact WHERE is_success=TRUE AND settlement_time IS NULL GROUP BY merchant_id"},
{"question": "Show peak transaction hours last month", "answer": "SELECT HOUR(transaction_time), COUNT(*) FROM transaction_fact WHERE MONTH(transaction_time)=MONTH(CURRENT_DATE)-1 GROUP BY 1 ORDER BY 2 DESC"},
{"question": "Compare weekday vs weekend transaction volume", "answer": "SELECT CASE WHEN DAYOFWEEK(transaction_time) IN (1,7) THEN 'Weekend' ELSE 'Weekday' END, SUM(amount) FROM transaction_fact WHERE is_success=TRUE GROUP BY 1"},
{"question": "Find busiest transaction minute yesterday", "answer": "SELECT DATE_FORMAT(transaction_time,'%H:%i'), COUNT(*) FROM transaction_fact WHERE DATE(transaction_time)=CURRENT_DATE-1 GROUP BY 1 ORDER BY 2 DESC LIMIT 1"},
{"question": "Show TPV growth by country", "answer": "SELECT user_country, YEAR(transaction_time), SUM(amount) FROM transaction_fact WHERE is_success=TRUE GROUP BY user_country, YEAR(transaction_time)"},
{"question": "Calculate cross-border transaction growth rate", "answer": "WITH curr AS (SELECT SUM(amount) AS amt FROM transaction_fact WHERE is_success=TRUE AND user_country!=merchant_country AND YEAR(transaction_time)=2024), prev AS (SELECT SUM(amount) AS amt FROM transaction_fact WHERE is_success=TRUE AND user_country!=merchant_country AND YEAR(transaction_time)=2023) SELECT (curr.amt - prev.amt)/prev.amt*100 FROM curr, prev"},
{"question": "Find time zones with highest midnight activity", "answer": "SELECT user_country, COUNT(*) FROM transaction_fact WHERE HOUR(CONVERT_TZ(transaction_time,'UTC',user_country_timezone)) BETWEEN 0 AND 3 GROUP BY user_country"},
{"question": "Show seasonal transaction patterns", "answer": "SELECT MONTH(transaction_time), SUM(amount) FROM transaction_fact WHERE is_success=TRUE GROUP BY MONTH(transaction_time)"},
{"question": "Compare morning vs evening transactions", "answer": "SELECT CASE WHEN HOUR(transaction_time) BETWEEN 6 AND 12 THEN 'Morning' WHEN HOUR(transaction_time) BETWEEN 18 AND 24 THEN 'Evening' ELSE 'Other' END, SUM(amount) FROM transaction_fact WHERE is_success=TRUE GROUP BY 1"},
{"question": "Find countries with >50% cross-border TPV", "answer": "SELECT user_country, (SUM(CASE WHEN user_country!=merchant_country THEN amount END)*100.0/SUM(amount)) AS ratio FROM transaction_fact WHERE is_success=TRUE GROUP BY user_country HAVING ratio > 50"},
{"question": "Show transaction volume by time zone", "answer": "SELECT user_country, HOUR(CONVERT_TZ(transaction_time,'UTC',timezone)), COUNT(*) FROM transaction_fact JOIN country_timezones ON user_country=country_code GROUP BY 1,2"},
{"question": "Show payment method market share", "answer": "SELECT payment_method, (SUM(amount)*100.0/(SELECT SUM(amount) FROM transaction_fact WHERE is_success=TRUE)) AS share FROM transaction_fact WHERE is_success=TRUE GROUP BY payment_method"},
{"question": "Find fastest growing payment method", "answer": "WITH curr AS (SELECT payment_method, SUM(amount) AS amt FROM transaction_fact WHERE YEAR(transaction_time)=2024 GROUP BY 1), prev AS (SELECT payment_method, SUM(amount) AS amt FROM transaction_fact WHERE YEAR(transaction_time)=2023 GROUP BY 1) SELECT curr.payment_method, (curr.amt - prev.amt)/prev.amt*100 FROM curr JOIN prev ON curr.payment_method=prev.payment_method ORDER BY 2 DESC LIMIT 1"},
{"question": "Compare mobile vs desktop success rates", "answer": "SELECT CASE WHEN payment_method IN ('Mobile Wallet','QR Code') THEN 'Mobile' ELSE 'Desktop' END, (COUNT(CASE WHEN is_success THEN 1 END)*100.0/COUNT(*) FROM transaction_fact GROUP BY 1"},
{"question": "Find payment methods with high fraud rates", "answer": "SELECT payment_method, (COUNT(CASE WHEN is_fraud THEN 1 END)*100.0/COUNT(*) FROM transaction_fact GROUP BY payment_method HAVING COUNT(*) > 1000 ORDER BY 2 DESC LIMIT 3"},
{"question": "Show average transaction value by method", "answer": "SELECT payment_method, AVG(amount) FROM transaction_fact WHERE is_success=TRUE GROUP BY payment_method"},
{"question": "List methods used by high-LTV users", "answer": "SELECT t.payment_method, COUNT(DISTINCT t.user_id) FROM transaction_fact t JOIN user_behavior_summary u ON t.user_id=u.user_id WHERE u.total_amount > 10000 GROUP BY t.payment_method"},
{"question": "Find payment method abandonment rate", "answer": "SELECT payment_method, (COUNT(CASE WHEN NOT is_success THEN 1 END)*100.0/COUNT(*) FROM transaction_fact GROUP BY payment_method"},
{"question": "Compare new vs old payment method adoption", "answer": "SELECT payment_method, CASE WHEN MIN(transaction_time) > '2024-01-01' THEN 'New' ELSE 'Old' END, COUNT(*) FROM transaction_fact GROUP BY payment_method"},
{"question": "Show method preference by country", "answer": "SELECT user_country, payment_method, COUNT(*) FROM transaction_fact GROUP BY user_country, payment_method"},
{"question": "Find methods with increasing refund rates", "answer": "WITH curr AS (SELECT payment_method, COUNT(CASE WHEN is_refunded THEN 1 END)*100.0/COUNT(*) AS rate FROM transaction_fact WHERE YEAR(transaction_time)=2024 GROUP BY 1), prev AS (SELECT payment_method, COUNT(CASE WHEN is_refunded THEN 1 END)*100.0/COUNT(*) AS rate FROM transaction_fact WHERE YEAR(transaction_time)=2023 GROUP BY 1) SELECT curr.payment_method, curr.rate - prev.rate AS change FROM curr JOIN prev ON curr.payment_method=prev.payment_method ORDER BY change DESC"},
{"question": "Find VIP users (top 1% spenders)", "answer": "WITH ranks AS (SELECT user_id, total_amount, NTILE(100) OVER (ORDER BY total_amount DESC) AS percentile FROM user_behavior_summary) SELECT user_id FROM ranks WHERE percentile = 1"},
{"question": "Segment users by transaction frequency", "answer": "SELECT CASE WHEN total_transactions=1 THEN 'One-time' WHEN total_transactions BETWEEN 2 AND 5 THEN 'Occasional' ELSE 'Frequent' END, COUNT(*) FROM user_behavior_summary GROUP BY 1"},
{"question": "Identify dormant users (no transactions in 6m)", "answer": "SELECT user_id FROM user_behavior_summary WHERE last_transaction_date < DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)"},
{"question": "Find users who only use one payment method", "answer": "SELECT user_id FROM (SELECT user_id, COUNT(DISTINCT payment_method) AS cnt FROM transaction_fact GROUP BY user_id) t WHERE cnt=1"},
{"question": "Segment by spending tier: <$100, $100-$500, >$500", "answer": "SELECT CASE WHEN total_amount <100 THEN 'Low' WHEN total_amount BETWEEN 100 AND 500 THEN 'Medium' ELSE 'High' END, COUNT(*) FROM user_behavior_summary GROUP BY 1"},
{"question": "Find users with increasing spending", "answer": "WITH monthly AS (SELECT user_id, DATE_FORMAT(transaction_time,'%Y-%m') AS month, SUM(amount) AS amt FROM transaction_fact GROUP BY user_id, month) SELECT user_id FROM monthly GROUP BY user_id HAVING SUM(CASE WHEN amt > LAG(amt) OVER (ORDER BY month) THEN 1 ELSE 0 END)/COUNT(*) >= 0.8"},
{"question": "Identify seasonal users (only holiday activity)", "answer": "SELECT user_id FROM transaction_fact GROUP BY user_id HAVING COUNT(DISTINCT MONTH(transaction_time))=1 AND MONTH(MIN(transaction_time)) IN (11,12)"},
{"question": "Find users with cross-border transactions", "answer": "SELECT DISTINCT user_id FROM transaction_fact WHERE user_country != merchant_country"},
{"question": "Segment users by preferred payment time", "answer": "SELECT user_id, CASE WHEN HOUR(transaction_time) BETWEEN 9 AND 17 THEN 'Day' ELSE 'Night' END AS time_segment, COUNT(*) FROM transaction_fact GROUP BY user_id, time_segment"},
{"question": "Identify multi-currency users", "answer": "SELECT user_id FROM transaction_fact GROUP BY user_id HAVING COUNT(DISTINCT currency) > 1"},
{"question": "Find correlation between transaction time and fraud", "answer": "SELECT HOUR(transaction_time), (COUNT(CASE WHEN is_fraud THEN 1 END)*100.0/COUNT(*)) FROM transaction_fact GROUP BY 1 ORDER BY 2 DESC"},
{"question": "Calculate cohort retention rate", "answer": "WITH cohorts AS (SELECT user_id, DATE_FORMAT(MIN(transaction_time), '%Y-%m') AS cohort FROM transaction_fact GROUP BY user_id), periods AS (SELECT user_id, TIMESTAMPDIFF(MONTH, cohort, transaction_time) AS period FROM transaction_fact t JOIN cohorts c ON t.user_id=c.user_id) SELECT cohort, period, COUNT(DISTINCT user_id) FROM periods GROUP BY cohort, period"},
{"question": "Predict next month's TPV using moving average", "answer": "SELECT AVG(SUM(amount)) OVER (ORDER BY YEARMONTH ROWS BETWEEN 3 PRECEDING AND 1 PRECEDING) FROM (SELECT DATE_FORMAT(transaction_time,'%Y-%m') AS YEARMONTH, SUM(amount) FROM transaction_fact WHERE is_success=TRUE GROUP BY YEARMONTH) t"},
{"question": "Find users likely to churn (declining activity)", "answer": "WITH monthly AS (SELECT user_id, DATE_FORMAT(transaction_time,'%Y-%m') AS month, COUNT(*) AS cnt FROM transaction_fact GROUP BY user_id, month) SELECT user_id FROM monthly GROUP BY user_id HAVING SUM(CASE WHEN cnt < LAG(cnt) OVER (ORDER BY month) THEN 1 ELSE 0 END) >= 2"},
{"question": "Calculate basket size growth", "answer": "SELECT YEAR(transaction_time), AVG(amount) FROM transaction_fact WHERE is_success=TRUE GROUP BY 1"},
{"question": "Find merchants with abnormal transaction patterns", "answer": "SELECT merchant_id, STDDEV(amount) AS volatility FROM transaction_fact WHERE is_success=TRUE GROUP BY merchant_id HAVING volatility > 2*AVG(amount)"},
{"question": "Identify potential collusion networks", "answer": "SELECT t1.user_id, t2.user_id, COUNT(*) FROM transaction_fact t1 JOIN transaction_fact t2 ON t1.merchant_id=t2.merchant_id WHERE t1.user_id != t2.user_id GROUP BY 1,2 HAVING COUNT(*) > 10"},
{"question": "Calculate customer acquisition cost payback period", "answer": "WITH cohorts AS (SELECT user_id, MIN(transaction_time) AS first_tx FROM transaction_fact GROUP BY user_id), costs AS (SELECT DATE(first_tx) AS cohort_date, COUNT(*)*50 AS cost FROM cohorts GROUP BY cohort_date), revenue AS (SELECT DATE(first_tx) AS cohort_date, SUM(amount) AS revenue FROM cohorts c JOIN transaction_fact t ON c.user_id=t.user_id GROUP BY cohort_date) SELECT c.cohort_date, c.cost/r.revenue FROM costs c JOIN revenue r ON c.cohort_date=r.cohort_date"},
{"question": "Find transactions with high-risk patterns", "answer": "SELECT * FROM transaction_fact WHERE amount > (SELECT AVG(amount)+3*STDDEV(amount) FROM transaction_fact) AND DATEDIFF(transaction_time, user_first_transaction_date) < 3"},
{"question": "Calculate CLV/CAC ratio", "answer": "WITH cac AS (SELECT AVG(50) AS avg_cac FROM marketing_costs), clv AS (SELECT AVG(total_amount) AS avg_clv FROM user_behavior_summary) SELECT avg_clv/avg_cac FROM cac, clv"}]